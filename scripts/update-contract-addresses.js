// Script to update contractAddresses.js after deployment
const fs = require('fs');
const path = require('path');

// Function to write the contract addresses to a file
async function updateContractAddresses(savingsAddress, microloanAddress) {
  const filePath = path.join(__dirname, '../app/lib/contractAddresses.js');
  
  // Get network name from environment variable or default to alfajores
  const networkName = process.env.HARDHAT_NETWORK || 'alfajores';
  const isMainnet = networkName === 'celo';
  
  const content = `// Auto-generated by update-contract-addresses.js
// Last updated: ${new Date().toISOString()}

/**
 * Village Digital Wallet Contract Addresses
 */
export const contractAddresses = {
  // Addresses for Alfajores Testnet
  alfajores: {
    savingsGroup: "${isMainnet ? '' : savingsAddress}",
    microloanSystem: "${isMainnet ? '' : microloanAddress}"
  },
  
  // Addresses for Celo Mainnet
  celo: {
    savingsGroup: "${isMainnet ? savingsAddress : ''}",
    microloanSystem: "${isMainnet ? microloanAddress : ''}"
  }
};

// Export a function to get the correct addresses based on the network
export function getContractAddresses(networkName) {
  return contractAddresses[networkName] || contractAddresses.alfajores;
}
`;

  fs.writeFileSync(filePath, content);
  console.log(`Contract addresses written to ${filePath}`);
}

// If this file is run directly
if (require.main === module) {
  const args = process.argv.slice(2);
  if (args.length !== 2) {
    console.error('Usage: node update-contract-addresses.js <savingsAddress> <microloanAddress>');
    process.exit(1);
  }
  
  const [savingsAddress, microloanAddress] = args;
  updateContractAddresses(savingsAddress, microloanAddress)
    .then(() => console.log('Contract addresses updated successfully'))
    .catch(error => {
      console.error('Error updating contract addresses:', error);
      process.exit(1);
    });
}

module.exports = { updateContractAddresses };
